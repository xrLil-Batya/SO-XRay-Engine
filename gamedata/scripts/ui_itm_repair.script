-- ui_itm_repair
-- Alundaio
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]
----------------------------------------------------------------------------------------------------------------------
-- Файл:        		UI_ITM_REPAIR.SCRIPT
-- Описание:    		Скриптовый интерфейс ремонтных наборов.
-- Последняя редакция:	30.06.2021
-- Адаптация:       	ARTLantist
----------------------------------------------------------------------------------------------------------------------

class "ui_repair_kit" (CUIScriptWnd)

function table_contains(table, element)
  for _, value in pairs(table) do
    if value == element then
      return true
    end
  end
  return false
end

function ui_repair_kit:__init(owner,obj,section) super()
	self.object = obj
	self.owner = owner
	self.section = section
	local ini = system_ini()
	
	self.use_condition = r_bool_ex(ini,section,"use_condition")
	self.min_condition = r_float_ex(ini,section,"repair_min_condition")
	self.max_condition = r_float_ex(ini,section,"repair_max_condition")
	self.add_condition = r_float_ex(ini,section,"repair_add_condition")
	self.part_bonus = r_float_ex(ini,section,"repair_part_bonus")
	self.use_parts = r_bool_ex(ini,section,"repair_use_parts")
	self.repair_type = r_string_ex(ini,section,"repair_type","all")
	self.repair_use_anim = r_string_ex(ini,section,"repair_use_anim","repair_kit")
	self.repair_condition_type = r_float_ex(ini,section,"repair_condition_type")
	
	local only = {}
	local conf = r_string_ex(ini,section, "repair_only")
	if conf then
		for s in string.gfind(conf, "%s*([^,]+)%s*") do
			table.insert(only, s)
		end
	end
	self.repair_only = only
	
	self.repair_refuse = r_string_ex(ini,section,"repair_refuse")
	
	local excl = {}
	conf = r_string_ex(ini,section, "repair_parts_exclude")
	if conf then
		for s in string.gfind(conf, "%s*([^,]+)%s*") do
			table.insert(excl, s)
		end
	end
	self.repair_only = excl
	local incl = {}
	conf = r_string_ex(ini,section, "repair_parts_include")
	if conf then
		for s in string.gfind(conf, "%s*([^,]+)%s*") do
			 table.insert(incl, s)
		end
	end
	self.parts_include = incl
	self:InitControls()
	self:InitCallBacks()
end

function ui_repair_kit:__finalize()
end

function ui_repair_kit:FillList()
	self.list_armor:RemoveAll()

	local function fill_list(actor,obj)
		
		if not obj then return end

		if system_ini():line_exist(obj:section(), "repair_type") then
			local main_section = system_ini():r_string(obj:section(),"repair_type")
			if (self.repair_only and table_contains(self.repair_only,main_section)) then
				if (self.repair_type == "weapon" and IsWeapon(obj))
				or (self.repair_type == "outfit" and (IsOutfit(obj) or IsHeadgear(obj) or IsArtefact(obj))) then
					local con = obj:condition()
					if (con and con >= self.min_condition and con < self.max_condition) then
						local item_name = game.translate_string(system_ini():r_string(obj:section(), "inv_name"))
						self:AddItemTo_list_armor(item_name, obj, con)
					end
				end
			end
		end
	end

	db.actor:iterate_inventory(fill_list,db.actor)
end

function ui_repair_kit:FillPartsList()
	self.list_trash:RemoveAll()

	if self.list_armor:GetSize()==0 then return end

	local item = self.list_armor:GetSelectedItem()
	if not (item) then
		return
	end

	local obj = level.object_by_id(item.item_id)
	local function fill_list(actor,itm)
		if (itm and itm:id() ~= item.item_id) then
			if (self.parts_include and table_contains(self.parts_include,itm:section())) 
			then
				local item_name = game.translate_string(system_ini():r_string(itm:section(), "inv_name"))
				self:AddItemTo_list_trash(item_name,itm,system_ini():r_float(itm:section(),"repair_part_bonus"))
			end
		end
	end

	db.actor:iterate_inventory(fill_list,db.actor)
end

function ui_repair_kit:InitControls()
	local xml = CScriptXmlInit()
	self:SetWndRect(Frect():set(0,0,1024,768))
	self:SetWndPos(vector2():set(240,120))
	xml:ParseFile("ui_repair_kit.xml")
	self.window = xml:InitStatic("window", self)
	self.window:SetWndPos(vector2():set(0, 0))
	xml:InitFrame("window:list_armor_frame", self.window)
	self.list_armor = xml:InitListBox("window:list_armor", self.window)
	self.list_armor:ShowSelectedItem(true)
	self:Register(self.list_armor, "list_armor")
	xml:InitFrame("window:list_trash_frame", self.window)
	self.list_trash = xml:InitListBox("window:list_trash", self.window)
	self.list_trash:ShowSelectedItem(true)
	self:Register(self.list_trash, "list_trash")
	self:Register(xml:Init3tButton("window:btn_ok", self.window), "btn_ok")
	self:Register(xml:Init3tButton("window:btn_cancel", self.window), "btn_cancel")

	self.picture			= xml:InitStatic("window:icon",self.window)
	self.picture_parts		= xml:InitStatic("window:icon_parts",self.window)
	
	self.caption_parts 		= xml:InitTextWnd("window:caption_parts",self.window)
	self.caption_repair		= xml:InitTextWnd("window:caption_repair",self.window)
	
	self.pic = xml:InitStatic("window:icon_tool", self.window)
	local inv_grid_width = system_ini():r_float(self.section,"inv_grid_width")
	local inv_grid_height = system_ini():r_float(self.section,"inv_grid_height")
	local inv_grid_x = system_ini():r_float(self.section,"inv_grid_x")
	local inv_grid_y = system_ini():r_float(self.section,"inv_grid_y")

	local x1 = inv_grid_x*50
	local y1 = inv_grid_y*50

	local w = inv_grid_width*50
	local h = inv_grid_height*50

	local x2 = x1 + w
	local y2 = y1 + h

	local w,h = w,h
	w,h = w/1.5,h/1.2
	self.pic:InitTexture("ui\\ui_icon_equipment")
	self.pic:SetTextureRect(Frect():set(x1,y1,x2,y2))
	self.pic:SetWndSize(vector2():set(w,h))
		
	if not (self.pic.x) then
		local pos = self.pic:GetWndPos()
		self.pic.x = pos.x
		self.pic.y = pos.y
	end

	self.pic:SetWndPos(vector2():set(self.pic.x-w/2, self.pic.y-h/2))
end

function ui_repair_kit:InitCallBacks()
	self:AddCallback("list_armor", ui_events.LIST_ITEM_CLICKED, self.list_armor_list_item_clicked, self)
	self:AddCallback("list_trash", ui_events.LIST_ITEM_CLICKED, self.list_trash_list_item_clicked, self)
	self:AddCallback("btn_ok", ui_events.BUTTON_CLICKED, self.btn_ok_button_clicked, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.btn_cancel_button_clicked, self)
end

------------------- >>>  Класс элемента списка list_armor  <<< -------------------

class "list_armor_ListItem"(CUIListBoxItem)
function list_armor_ListItem:__init() super()
	self.text_item = self:GetTextItem()
	self.text_item:SetFont(GetFontLetterica16Russian())
	self.text_item:SetTextColor(GetARGB(255,216,186,140))
end
------------------- >>>  END  <<< -------------------

function ui_repair_kit:AddItemTo_list_armor(item_name, item, condition)
	local _itm = list_armor_ListItem()
	
	condition = math.ceil(condition*100)
	local inv_name = item_name.."   ".."+"..condition.."%"
	_itm.text_item:SetText(inv_name)
	_itm.text_item:SetWndSize(vector2():set(271, 18))
 	self.list_armor:AddExistingItem(_itm)
	
	if (item) then
		local sec = item:section()
		_itm.item_id = item:id()
		
		local inv_grid_width = system_ini():r_float(sec,"inv_grid_width")
		local inv_grid_height = system_ini():r_float(sec,"inv_grid_height")
		local inv_grid_x = system_ini():r_float(sec,"inv_grid_x")
		local inv_grid_y = system_ini():r_float(sec,"inv_grid_y")

		_itm.x1 = inv_grid_x*50
		_itm.y1 = inv_grid_y*50

		_itm.width = inv_grid_width*50
		_itm.height = inv_grid_height*50

		_itm.x2 = _itm.x1 + _itm.width
		_itm.y2 = _itm.y1 + _itm.height
	end
end

------------------- >>>  Класс элемента списка list_trash  <<< -------------------

class "list_trash_ListItem"(CUIListBoxItem)
function list_trash_ListItem:__init() super()
	self.text_item = self:GetTextItem()
	self.text_item:SetFont(GetFontLetterica16Russian())
	self.text_item:SetTextColor(GetARGB(255,216,186,140))
end
------------------- >>>  END  <<< -------------------

function ui_repair_kit:AddItemTo_list_trash(item_name, item, condition)
	local _itm = list_trash_ListItem()
	
	condition = math.ceil(condition*100)
	local inv_name = item_name.."   ".."+"..condition.."%"
	_itm.text_item:SetText(inv_name)
	_itm.text_item:SetWndSize(vector2():set(271, 18))
 	self.list_trash:AddExistingItem(_itm)
	
	if (item) then
		local sec = item:section()
		_itm.item_id = item:id()
		
		local inv_grid_width = system_ini():r_float(sec,"inv_grid_width")
		local inv_grid_height = system_ini():r_float(sec,"inv_grid_height")
		local inv_grid_x = system_ini():r_float(sec,"inv_grid_x")
		local inv_grid_y = system_ini():r_float(sec,"inv_grid_y")

		_itm.x1 = inv_grid_x*50
		_itm.y1 = inv_grid_y*50

		_itm.width = inv_grid_width*50
		_itm.height = inv_grid_height*50

		_itm.x2 = _itm.x1 + _itm.width
		_itm.y2 = _itm.y1 + _itm.height
	end
end

function ui_repair_kit:list_armor_list_item_clicked()
	if self.list_armor:GetSize()==0 then return end

	local item = self.list_armor:GetSelectedItem()
	if not (item) then
		self.picture:SetTextureRect(Frect():set(0,0,0,0))
		return
	end

	local se_item = item.item_id and alife():object(item.item_id)
	if (se_item == nil or not db.actor:object(se_item:section_name())) then
		self.list_armor:RemoveItem(item)
		return
	end
	
	local sec = se_item:section_name()

	local w,h = item.width,item.height
	w,h = item.width/1.5,item.height/1.2
	self.picture:InitTexture("ui\\ui_icon_equipment")
	self.picture:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture:SetWndSize(vector2():set(w,h))

	if not (self.picture.x) then
		local pos = self.picture:GetWndPos()
		self.picture.x = pos.x
		self.picture.y = pos.y
	end

	self.picture:SetWndPos(vector2():set(self.picture.x-w/2, self.picture.y-h/2))
	
	local con = math.floor(self.add_condition*100)
	self.caption_repair:SetText("+"..con.."%")

	if (self.use_parts) then
		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		self.caption_parts:SetText("")
		self:FillPartsList()
	end
end

function ui_repair_kit:list_trash_list_item_clicked()
	if self.list_trash:GetSize()==0 then return end

	local item = self.list_trash:GetSelectedItem()
	if not (item) then
		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		return
	end

	local se_item = item.item_id and alife():object(item.item_id)
	if (se_item == nil or not db.actor:object(se_item:section_name())) then
		self.list_trash:RemoveItem(item)
		return
	end
	
	local sec = se_item:section_name()
	local part_bonus = system_ini():r_float(sec,"repair_part_bonus")

	local w,h = item.width,item.height
	w,h = item.width/1.5,item.height/1.2
	self.picture_parts:InitTexture("ui\\ui_icon_equipment")
	self.picture_parts:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture_parts:SetWndSize(vector2():set(w,h))

	if not (self.picture_parts.x) then
		local pos = self.picture_parts:GetWndPos()
		self.picture_parts.x = pos.x
		self.picture_parts.y = pos.y
	end

	self.picture_parts:SetWndPos(vector2():set(self.picture_parts.x-w/2, self.picture_parts.y-h/2))
	
	local con = math.floor((self.add_condition+ part_bonus)*100)
	self.caption_repair:SetText("+"..con.."%")

end

function ui_repair_kit:btn_ok_button_clicked()
	if (self.list_armor) then
		index = self.list_armor:GetSelectedIndex()
		if (index ~= -1) then
			item = self.list_armor:GetItemByIndex(index)
			local se_obj = item and item.item_id and alife():object(item.item_id)
			local obj = item and item.item_id and level.object_by_id(item.item_id)
			if (obj) then
				if (self.list_trash) then
					index = self.list_trash:GetSelectedIndex()
					if (index ~= -1) then
						item2 = self.list_trash:GetItemByIndex(index)
						local se_obj2 = item2 and item2.item_id and alife():object(item2.item_id)
						local obj2 = item2 and item2.item_id and level.object_by_id(item2.item_id)
						if (obj2) then
							local sec = se_obj2:section_name()
							local part_bonus = system_ini():r_float(sec,"repair_part_bonus")
							self:RepairItem(obj,part_bonus)
							self:RemoveTrash(se_obj2)
							self:Hide()
						else
							self:RepairItem(obj,0)
							self:Hide()
						end
					else
						self:RepairItem(obj,0)
						self:Hide()
					end
				else
					self:RepairItem(obj,0)
					self:Hide()
				end
			else
				return
			end
		end
	end
end

function ui_repair_kit:btn_cancel_button_clicked()
	alife():create(self.section,db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
	self:Hide()
end


function ui_repair_kit:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (keyboard_action == ui_events.WINDOW_KEY_PRESSED) then
		if (dik == DIK_keys.DIK_ESCAPE) then
			self:btn_cancel_button_clicked()
		end
	end
	return true
end

function ui_repair_kit:Hide()
	self:HideDialog()
end


function ui_repair_kit:RemoveTrash(s_obj)
-- Add trash if is Repairkit in stack
-- sharpening_stones x4
	if s_obj:section_name() =="sharpening_stones_4" then
	alife():create("sharpening_stones_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="sharpening_stones_3" then
	alife():create("sharpening_stones_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="sharpening_stones_2" then
	alife():create("sharpening_stones", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- cleaning_kit_p x3
	if s_obj:section_name() =="cleaning_kit_p_3" then
	alife():create("cleaning_kit_p_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="cleaning_kit_p_2" then
	alife():create("cleaning_kit_p", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- cleaning_kit_s x3
	if s_obj:section_name() =="cleaning_kit_s_3" then
	alife():create("cleaning_kit_s_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="cleaning_kit_s_2" then
	alife():create("cleaning_kit_s", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- cleaning_kit_r x3
	if s_obj:section_name() =="cleaning_kit_r_3" then
	alife():create("cleaning_kit_r_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="cleaning_kit_r_2" then
	alife():create("cleaning_kit_r", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- cleaning_kit_u x3
	if s_obj:section_name() =="cleaning_kit_u_3" then
	alife():create("cleaning_kit_u_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="cleaning_kit_u_2" then
	alife():create("cleaning_kit_u", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end

-- toolkit_p
	if s_obj:section_name() =="toolkit_p" then
	alife():create("toolkit_p_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- toolkit_s
	if s_obj:section_name() =="toolkit_s" then
	alife():create("toolkit_s_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- toolkit_r
	if s_obj:section_name() =="toolkit_r" then
	alife():create("toolkit_r_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- sewing_kit_b x4
	if s_obj:section_name() =="sewing_kit_b_4" then
	alife():create("sewing_kit_b_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="sewing_kit_b_3" then
	alife():create("sewing_kit_b_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="sewing_kit_b_2" then
	alife():create("sewing_kit_b", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- sewing_kit_a x4
	if s_obj:section_name() =="sewing_kit_a_4" then
	alife():create("sewing_kit_a_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="sewing_kit_a_3" then
	alife():create("sewing_kit_a_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="sewing_kit_a_2" then
	alife():create("sewing_kit_a", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- sewing_kit_h x4
	if s_obj:section_name() =="sewing_kit_h_4" then
	alife():create("sewing_kit_h_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="sewing_kit_h_3" then
	alife():create("sewing_kit_h_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_obj:section_name() =="sewing_kit_h_2" then
	alife():create("sewing_kit_h", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- glue_a x2
	if s_obj:section_name() =="glue_a_2" then
	alife():create("glue_a", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- glue_e x2
	if s_obj:section_name() =="glue_e_2" then
	alife():create("glue_e", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end

-- armor_repair_fa x2
	if s_obj:section_name() =="armor_repair_fa_2" then
	alife():create("armor_repair_fa", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- helmet_repair
	if s_obj:section_name() =="helmet_repair_kit" then
	alife():create("helmet_repair_kit_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- armor_repair_pro
	if s_obj:section_name() =="armor_repair_pro" then
	alife():create("armor_repair_pro_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	alife():release(s_obj, true)
end


function ui_repair_kit:RepairItem(obj,part_bonus)
	local con_bonus = (self.add_condition+ part_bonus)
	local con_new = obj:condition() + con_bonus
	obj:set_condition(con_new)
	
    actor_effects.use_item(self.repair_use_anim)
	
	-- Add Repairkit if in stack
-- sharpening_stones x4
	if self.section =="sharpening_stones_4" then
	alife():create("sharpening_stones_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="sharpening_stones_3" then
	alife():create("sharpening_stones_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="sharpening_stones_2" then
	alife():create("sharpening_stones", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- cleaning_kit_p x3
	if self.section =="cleaning_kit_p_3" then
	alife():create("cleaning_kit_p_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="cleaning_kit_p_2" then
	alife():create("cleaning_kit_p", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- cleaning_kit_s x3
	if self.section =="cleaning_kit_s_3" then
	alife():create("cleaning_kit_s_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="cleaning_kit_s_2" then
	alife():create("cleaning_kit_s", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- cleaning_kit_r x3
	if self.section =="cleaning_kit_r_3" then
	alife():create("cleaning_kit_r_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="cleaning_kit_r_2" then
	alife():create("cleaning_kit_r", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- cleaning_kit_u x3
	if self.section =="cleaning_kit_u_3" then
	alife():create("cleaning_kit_u_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="cleaning_kit_u_2" then
	alife():create("cleaning_kit_u", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end

-- toolkit_p
	if self.section =="toolkit_p" then
	alife():create("toolkit_p_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- toolkit_s
	if self.section =="toolkit_s" then
	alife():create("toolkit_s_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- toolkit_r
	if self.section =="toolkit_r" then
	alife():create("toolkit_r_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- sewing_kit_b x4
	if self.section =="sewing_kit_b_4" then
	alife():create("sewing_kit_b_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="sewing_kit_b_3" then
	alife():create("sewing_kit_b_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="sewing_kit_b_2" then
	alife():create("sewing_kit_b", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- sewing_kit_a x4
	if self.section =="sewing_kit_a_4" then
	alife():create("sewing_kit_a_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="sewing_kit_a_3" then
	alife():create("sewing_kit_a_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="sewing_kit_a_2" then
	alife():create("sewing_kit_a", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- sewing_kit_h x4
	if self.section =="sewing_kit_h_4" then
	alife():create("sewing_kit_h_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="sewing_kit_h_3" then
	alife():create("sewing_kit_h_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if self.section =="sewing_kit_h_2" then
	alife():create("sewing_kit_h", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- glue_a x2
	if self.section =="glue_a_2" then
	alife():create("glue_a", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- glue_e x2
	if self.section =="glue_e_2" then
	alife():create("glue_e", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end

-- armor_repair_fa x2
	if self.section =="armor_repair_fa_2" then
	alife():create("armor_repair_fa", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- helmet_repair
	if self.section =="helmet_repair_kit" then
	alife():create("helmet_repair_kit_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- armor_repair_pro
	if self.section =="armor_repair_pro" then
	alife():create("armor_repair_pro_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
end