-- basic dynamic msg_box
-- alundaio

local ini = ini_file("sr_teleport_sections.ltx")


class "msg_box_ui" (CUIScriptWnd)
function msg_box_ui:__init(obj,disable_msg,item) super()
	self:SetWndRect(Frect():set(0,0,1024,768))
	self:SetAutoDelete(true)
	
	self.name = obj and obj:name()
	self.disable_msg = disable_msg
	self.item = item

	if (string.find(self.name,obj:id())) then
		local story_name = story_objects.get_story_objects_registry():get_story_id(obj:id())
		self.name = story_name or self.name
	end

	if (not self.name or not ini:section_exist(self.name)) then
		return
	end

	local enable = r_string_ex(ini,self.name,"enable")
	enable = enable and xr_logic.pick_section_from_condlist(db.actor,obj,xr_logic.parse_condlist(obj,"enable",self.name,enable))

	if (enable ~= "true") then
		local reject_on_disable = r_bool_ex(ini,self.name,"reject_on_disabled")
		if (reject_on_disable) then
			local warning = r_string_ex(ini,self.name,"warning")
			if (warning) then
				SetHudMsg(game.translate_string(warning),5)
			end
			self:InitCallBacks()
			self:OnMsgCancel()
		end
		return
	end
	
	self.obj = obj

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")

	self:InitCallBacks()
	self:InitControls()
end

function msg_box_ui:__finalize()
end

function msg_box_ui:InitCallBacks()
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,			self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,		self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,			self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,			self.OnMsgCancel,					self)
end

function msg_box_ui:OnMsgOk()
	local path = r_string_ex(ini,self.name,"path")
	local point = path and patrol(path)

	if not (point) then
		return
	end

	if not (self.disable_msg) then
		level.add_pp_effector("black.ppe", 1313, false)
	end
	
	if (r_bool_ex(ini,self.name,"autosave")) then
		xr_effects.scenario_autosave(nil,nil,{r_string_ex(ini,self.name,"hint") or "moving"})
	end

	db.actor:set_actor_position(pos or point and point:point(0) or db.actor:position())
	
end

function msg_box_ui:OnMsgCancel()
	local path = r_string_ex(ini,self.name,"reject_path")
	local point = path and patrol(path)

	if not (point) then
		return
	end

	db.actor:set_actor_position(point and point:point(0) or db.actor:position())
	db.actor:set_actor_direction(device().cam_dir:getH())
	
end

function msg_box_ui:InitControls()
	if (self.disable_msg) then
		if (not self.item or db.actor:object(self.item)) then
			self:OnMsgOk()
		else
			self:OnMsgCancel()
		end
		return
	end

	self.message_box:InitMessageBox("message_box_yes_no")
	self.message_box:ShowDialog(true)
	local str = game.translate_string(r_string_ex(ini,self.name,"text") or "")
	self.message_box:SetText(str)
end
