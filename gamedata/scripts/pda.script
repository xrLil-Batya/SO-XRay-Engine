function set_active_subdialog(section)
	
	if (section == "eptRelations") then
		return ui_pda_relations_tab.get_ui()
	elseif (section == "eptEncyclopedia") then
		return ui_pda_encyclopedia.get_ui()
	end
	
end 

-- вызывается  1 раз в 3 секунды
function fill_faction_state(state)
	local board = sim_board.get_sim_board()

	state.member_count = 0
	state.resource = 0
	state.power = 0


 	state.actor_goodwill = 3000
	state.name = "ui_inGame2_hint_wnd_bar"
	state.icon = "ui_inGame2_hint_wnd_bar"
	state.icon_big = "logos_big_empty"
	state.target = game.translate_string("ui_st_no_faction")
	state.target_desc = "aaa"
	state.location = "a"

	state.war_state1 = "a"
	state.war_state_hint1 = "1"
	state.war_state2 = "3"
	state.war_state_hint2 = "2"
	state.war_state3 = "33"
	state.war_state_hint3 = ""
	state.war_state4 = "23"
	state.war_state_hint4 = ""
	state.war_state5 = "5"
	state.war_state_hint5 = "5"

	state.bonus = 0




end

--int		get_max_member_count	();   ------ 1 раз в 3 секунды
--float	get_max_resource();
--float	get_max_power();

function get_max_member_count()
	return 10
end

function get_max_resource()
	return 10
end

function get_max_power()
	return 10
end


-- потом это нужно стереть

-- int mode:
-- 0 = 	Undefined = закрыто
-- 1 = 	Inventory
-- 2 = 	Trade
-- 3 = 	Upgrade
-- 4 = 	DeadBodySearch
-- 10 =  Talk dialog  show
-- 11 =  Talk dialog  hide
local last_mode = 0
dialog_closed = false
trade_closed = false
upgrade_closed = false
function actor_menu_mode(mode)
	if(mode==0) then
		if(last_mode==1) then
			inventory_wnd_closed()
		elseif(last_mode==2) then
			trade_wnd_closed()
		elseif(last_mode==3) then
			upgrade_wnd_closed()
		elseif(last_mode==4) then
			dead_body_search_wnd_closed()
		end
		last_mode = 0
	elseif(mode==1) then
		last_mode = 1
		inventory_wnd_opened()
	elseif(mode==2) then
		last_mode = 2
		trade_wnd_opened()
	elseif(mode==3) then
		last_mode = 3
		upgrade_wnd_opened()
	elseif(mode==4) then
		last_mode = 4
		dead_body_search_wnd_opened()
	elseif(mode==10) then
		dialog_wnd_showed()
	elseif(mode==11) then
		dialog_wnd_closed()
	end
end

function inventory_wnd_opened()
	--printf("---:>Inventory opened")
end

function inventory_wnd_closed()
	--printf("---:>Inventory closed")
end

function trade_wnd_opened()
	dialog_closed = false
	--printf("---:>Trade opened")
end

function trade_wnd_closed()
	--printf("---:>Trade closed")
	trade_closed = true
end

function upgrade_wnd_opened()
	dialog_closed = false
	--printf("---:>Upgrade opened")
end

function upgrade_wnd_closed()
	--printf("---:>Upgrade closed")
	upgrade_closed = true
end

function dead_body_search_wnd_opened()
	--printf("---:>DeadBodySearch opened")
end

function dead_body_search_wnd_closed()
	--printf("---:>DeadBodySearch closed")
end

function dialog_wnd_showed()
	dialog_closed = false
	for k,v in pairs(db.storage) do
		local npc = v.object
		if npc ~= nil then
			local npc_id = npc:id()
			if npc:is_talking() and npc_id ~= db.actor:id() then
				local sound_theme = xr_sound.sound_table[npc_id]
				if sound_theme and sound_theme.reset then
					sound_theme:reset(npc_id)
				end
				break
			end
		end
	end
	--printf("---:>Talk Dialog show")
end

function dialog_wnd_closed()
	--printf("---:>Talk Dialog hide")
	dialog_closed = true
end

function get_stat(index) -- index= int        return string
	if(index==0) then
		return "00:00:00"
	elseif(index==1) then
		return tostring(xr_statistic.actor_statistic.surges)
	elseif(index==2) then
		return tostring(xr_statistic.actor_statistic.completed_quests)
	elseif(index==3) then
		return tostring(xr_statistic.actor_statistic.killed_monsters)
	elseif(index==4) then
		return tostring(xr_statistic.actor_statistic.killed_stalkers)
	elseif(index==5) then
		return tostring(xr_statistic.actor_statistic.artefacts_founded)
	elseif(index==6) then
		return tostring(xr_statistic.actor_statistic.founded_secrets)
	end
end


local primary_objects_tbl =
{
	{target="fst_space_restrictor_sawmill_spot",		hint="st_fst_sawmill_name"}
}

local change_objects_tbl =
{
	{target = "jup_b32_spot",		hint = "st_jup_b32_name",	zone = "jup_b32_anomal_zone",	group = "jup_b32_scanner_1_placed",	enabled = false},
	{target = "jup_b201_spot",		hint = "st_jup_b201_name",	zone = "jup_b201_anomal_zone",	group = "jup_b32_scanner_2_placed",	enabled = false},
	{target = "jup_b209_spot",		hint = "st_jup_b209_name",	zone = "jup_b209_anomal_zone",	group = "jup_b32_scanner_3_placed",	enabled = false},
	{target = "jup_b211_spot",		hint = "st_jup_b211_name",	zone = "jup_b211_anomal_zone",	group = "jup_b32_scanner_4_placed",	enabled = false},
	{target = "jup_b1_spot",		hint = "st_jup_b1_name",	zone = "jup_b10_anomal_zone",	group = "jup_b32_scanner_5_placed",	enabled = false},

}

local sleep_zones_tbl =
{
	{target = "zat_a2_sr_sleep_id",		hint = "st_ui_pda_sleep_place"},
	{target = "jup_a6_sr_sleep_id",		hint = "st_ui_pda_sleep_place"},
	{target = "pri_a16_sr_sleep_id",	hint = "st_ui_pda_sleep_place"}
}


function fill_primary_objects()
	for k,v in pairs(primary_objects_tbl) do
		local obj_id = get_story_object_id(v.target)
		if(obj_id) then
			level.map_add_object_spot(obj_id, "primary_object", v.hint)
		end
	end
	change_anomalies_names()
	fill_sleep_zones()
end

function fill_sleep_zones()
	for k,v in pairs(sleep_zones_tbl) do
		local obj_id = get_story_object_id(v.target)
		if(obj_id and db.storage[obj_id] and db.storage[obj_id].object) then
			if(db.storage[obj_id].object:position():distance_to(db.actor:position())<=150 and level.map_has_object_spot(obj_id, "ui_pda2_actor_sleep_location")==0) then
				level.map_add_object_spot(obj_id, "ui_pda2_actor_sleep_location", v.hint)
			elseif(db.storage[obj_id].object:position():distance_to(db.actor:position())>150 and level.map_has_object_spot(obj_id, "ui_pda2_actor_sleep_location")~=0) then
				level.map_remove_object_spot(obj_id, "ui_pda2_actor_sleep_location")
			end
		end
	end
end

function add_quick_slot_items_on_game_start()
	local _ini = system_ini()
	local str = utils.cfg_get_string(_ini, "actor", "quick_item_1", db.actor, false, "", "")
	get_console():execute("slot_0 "..str)
	local str = utils.cfg_get_string(_ini, "actor", "quick_item_2", db.actor, false, "", "")
	get_console():execute("slot_1 "..str)
	local str = utils.cfg_get_string(_ini, "actor", "quick_item_3", db.actor, false, "", "")
	get_console():execute("slot_2 "..str)
	local str = utils.cfg_get_string(_ini, "actor", "quick_item_4", db.actor, false, "", "")
	get_console():execute("slot_3 "..str)
end

function change_anomalies_names()
	if has_alife_info("jup_b32_scanner_reward") then
		for k,v in pairs(change_objects_tbl) do
			if has_alife_info(v.group) and not v.enabled then
				v.enabled = true
			end
		end
	end

	if level.name() ~= "jupiter" then
		return
	end
	for k,v in pairs(change_objects_tbl) do
		if v.enabled then
			local obj_id = get_story_object_id(v.target)
			if (obj_id) and (level.map_has_object_spot(obj_id, "primary_object") ~= 0) then
				level.map_remove_object_spot(obj_id, "primary_object")
			end
			local hint = game.translate_string(v.hint).."\\n".." \\n"
			local has_af = false
			local af_table = {}
			has_af, af_table = xr_conditions.anomaly_has_artefact(db.actor, nil, {v.zone})
			if has_af then
				hint = hint..game.translate_string("st_jup_b32_has_af")
				for k,v in pairs(af_table) do
					hint = hint.."\\n"..game.translate_string("st_"..v.."_name")
				end
			else
				hint = hint..game.translate_string("st_jup_b32_no_af")
			end
			if (obj_id) and level.map_has_object_spot(obj_id, "primary_object") == 0 then
				level.map_add_object_spot(obj_id, "primary_object", hint)
			end
		end
	end
end

function give_new_map_spot(obj)
	local ini = ini_file("plugins\\sr_spots_sections.ltx")
	
	local name = obj and obj:name()
	if (string.find(name,obj:id())) then
		local story_name = story_objects.get_story_objects_registry():get_story_id(obj:id())
		name = story_name or name
	end
	
	local spot = db.zone_by_name[r_string_ex(ini,name,"spot_name")]
	if spot == nil then spot = obj end
	local type_spot = r_string_ex(ini,name,"spot_type","primary_object")
	local descr_spot = game.translate_string(r_string_ex(ini,name,"spot_descr",""))
	
	level.map_add_object_spot_ser(spot:id(), type_spot, descr_spot)
	SetHudMsg(game.translate_string(descr_spot),3)
	xr_sound.set_sound_play(db.actor:id(), "pda_tips")
end

function give_new_level_changer_spot(obj)
	local ini = ini_file("sr_teleport_sections.ltx")
	
	if not obj then return end
	
	local name = obj and obj:name()
	if (string.find(name,obj:id())) then
		local story_name = story_objects.get_story_objects_registry():get_story_id(obj:id())
		name = story_name or name
	end
	
	local type_spot = r_string_ex(ini,name,"spot","level_changer")
	local descr_spot = game.translate_string(r_string_ex(ini,name,"hint",""))
	
	level.map_add_object_spot_ser(obj:id(), type_spot, descr_spot)
end