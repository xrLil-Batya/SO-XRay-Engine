-- ui_itm_cooking
-- ponney68
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]
----------------------------------------------------------------------------------------------------------------------
-- Файл:        		UI_ITM_COOKING.SCRIPT
-- Описание:    		Скриптовый интерфейс готовки на костре и в печи.
-- Последняя редакция:	27.06.2021
-- Адаптация:       	ARTLantist
----------------------------------------------------------------------------------------------------------------------

class "ui_cooking" (CUIScriptWnd)

function table_contains(table, element)
  for _, value in pairs(table) do
    if value == element then
      return true
    end
  end
  return false
end

function ui_cooking:__init(owner,object) super()
	self.owner = owner
	self.object = object
	self.section = object:section()
	if (object:section()=="ph_woodstove") then
		self.section = "wood_stove"
	elseif (object:section()=="ph_fieldcooker") then
		self.section = "fieldcooker"
	end
	local ini = system_ini()
	
	if ini:line_exist(self.section, "cooking_use_parts") then
		self.use_parts = ini:r_bool(self.section,"cooking_use_parts")
	else
		self.use_parts = false
	end
	if ini:line_exist(self.section, "repair_condition_type") then
		self.repair_condition_type = ini:r_float(self.section,"repair_condition_type")
	else
		self.repair_condition_type = 0
	end
	local ref = {}
	if self.section~="cooking" and ini:line_exist(self.section, "cooking_refuse") then
	    local conf = ini:r_string(self.section, "cooking_refuse")
	    for s in string.gfind(conf, "%s*([^,]+)%s*") do
		    table.insert(ref, s)
	    end
	end
	self.cooking_refuse = ref
	local incl = {}
	if ini:line_exist(self.section, "cooking_parts_include") then
	    local conf = ini:r_string(self.section, "cooking_parts_include")
	    for s in string.gfind(conf, "%s*([^,]+)%s*") do
		    table.insert(incl, s)
	    end
	end
	self.parts_include = incl
	self:InitControls()
	self:InitCallBacks()
end

function ui_cooking:__finalize()
end

function ui_cooking:FillList()
	self.list_meat:RemoveAll()

	local function fill_list(actor,itm)
		if (self.parts_include and table_contains(self.parts_include,itm:section())) then
			local item_name = game.translate_string(system_ini():r_string(itm:section(), "inv_name"))
			self:AddItemTo_list_meat(item_name,itm)
		end
	end

	db.actor:iterate_inventory(fill_list,db.actor)
end

function ui_cooking:FillPartsList()
	self.list_fuel:RemoveAll()

	if self.list_meat:GetSize()==0 then return end

	local item = self.list_meat:GetSelectedItem()
	if not (item) then
		return
	end

	local obj = level.object_by_id(item.item_id)
	local function fill_list(actor,itm)
		if (itm and itm:id() ~= item.item_id) then
			if (self.cooking_refuse and table_contains(self.cooking_refuse,itm:section())) 
			then
				local item_name = game.translate_string(system_ini():r_string(itm:section(), "inv_name"))
				self:AddItemTo_list_fuel(item_name,itm)
			end
		end
	end

	db.actor:iterate_inventory(fill_list,db.actor)
end

function ui_cooking:InitControls()
	local xml = CScriptXmlInit()
	self:SetWndRect(Frect():set(0,0,1024,768))
	self:SetWndPos(vector2():set(240,120))
	xml:ParseFile("ui_cooking.xml")
	self.Window = xml:InitStatic("Window", self)
	self.Window:SetWndPos(vector2():set(0, 0))
	xml:InitFrame("Window:list_meat_frame", self.Window)
	self.list_meat = xml:InitListBox("Window:list_meat", self.Window)
	self.list_meat:ShowSelectedItem(true)
	self:Register(self.list_meat, "list_meat")
	xml:InitFrame("Window:list_fuel_frame", self.Window)
	self.list_fuel = xml:InitListBox("Window:list_fuel", self.Window)
	self.list_fuel:ShowSelectedItem(true)
	self:Register(self.list_fuel, "list_fuel")
	xml:InitStatic("Window:icon_tool", self.Window)
	xml:InitStatic("Window:icon_parts", self.Window)
	xml:InitStatic("Window:icon", self.Window)
	self:Register(xml:Init3tButton("Window:btn_cook", self.Window), "btn_cook")
	self:Register(xml:Init3tButton("Window:btn_quit", self.Window), "btn_quit")
	local ctrl
	ctrl = xml:Init3tButton	("Window:btn_remove",	self.Window)
	self:Register			(ctrl, "button_remove")
	if (self.section=="cooking") then 
		ctrl:Show(false)
	end

	self.picture			= xml:InitStatic("Window:icon",self.Window)
	self.picture_parts		= xml:InitStatic("Window:icon_parts",self.Window)

	self.pic = xml:InitStatic("Window:icon_tool", self.Window)
	local inv_grid_width = system_ini():r_float(self.section,"inv_grid_width")
	local inv_grid_height = system_ini():r_float(self.section,"inv_grid_height")
	local inv_grid_x = system_ini():r_float(self.section,"inv_grid_x")
	local inv_grid_y = system_ini():r_float(self.section,"inv_grid_y")

	local x1 = inv_grid_x*50
	local y1 = inv_grid_y*50

	local w = inv_grid_width*50
	local h = inv_grid_height*50

	local x2 = x1 + w
	local y2 = y1 + h

	local w,h = w,h
	w,h = w/1.5,h/1.2
	self.pic:InitTexture("ui\\ui_icon_equipment")
	self.pic:SetTextureRect(Frect():set(x1,y1,x2,y2))
	self.pic:SetWndSize(vector2():set(w,h))
		
	if not (self.pic.x) then
		local pos = self.pic:GetWndPos()
		self.pic.x = pos.x
		self.pic.y = pos.y
	end

	self.pic:SetWndPos(vector2():set(self.pic.x-w/2, self.pic.y-h/2))
end

function ui_cooking:InitCallBacks()
	self:AddCallback("list_meat", ui_events.LIST_ITEM_CLICKED, self.list_meat_list_item_clicked, self)
	self:AddCallback("list_fuel", ui_events.LIST_ITEM_CLICKED, self.list_fuel_list_item_clicked, self)
	self:AddCallback("btn_cook", ui_events.BUTTON_CLICKED, self.btn_cook_button_clicked, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.btn_quit_button_clicked, self)
	self:AddCallback("button_remove", ui_events.BUTTON_CLICKED, self.btn_remove_button_clicked, self)
end

------------------- >>>  Класс элемента списка list_meat  <<< -------------------

class "list_meat_ListItem"(CUIListBoxItem)
function list_meat_ListItem:__init() super()
	self.text_item = self:GetTextItem()
	self.text_item:SetFont(GetFontLetterica18Russian())
	self.text_item:SetTextColor(GetARGB(255,216,186,140))
end
------------------- >>>  END  <<< -------------------

function ui_cooking:AddItemTo_list_meat(item_name, item)    --/Добавление элемента в список list_meat
	local _itm = list_meat_ListItem()
	_itm.text_item:SetText(item_name)
	_itm.text_item:SetWndSize(vector2():set(273, 18))
 	self.list_meat:AddExistingItem(_itm)
	
	if (item) then
		local sec = item:section()
		_itm.item_id = item:id()
		
		local inv_grid_width = system_ini():r_float(sec,"inv_grid_width")
		local inv_grid_height = system_ini():r_float(sec,"inv_grid_height")
		local inv_grid_x = system_ini():r_float(sec,"inv_grid_x")
		local inv_grid_y = system_ini():r_float(sec,"inv_grid_y")

		_itm.x1 = inv_grid_x*50
		_itm.y1 = inv_grid_y*50

		_itm.width = inv_grid_width*50
		_itm.height = inv_grid_height*50

		_itm.x2 = _itm.x1 + _itm.width
		_itm.y2 = _itm.y1 + _itm.height
	end
end

------------------- >>>  Класс элемента списка list_fuel  <<< -------------------

class "list_fuel_ListItem"(CUIListBoxItem)
function list_fuel_ListItem:__init() super()
	self.text_item = self:GetTextItem()
	self.text_item:SetFont(GetFontLetterica18Russian())
	self.text_item:SetTextColor(GetARGB(255,216,186,140))
end
------------------- >>>  END  <<< -------------------

function ui_cooking:AddItemTo_list_fuel(item_name, item)    --/Добавление элемента в список list_fuel
	local _itm = list_fuel_ListItem()
	_itm.text_item:SetText(item_name)
	_itm.text_item:SetWndSize(vector2():set(273, 18))
 	self.list_fuel:AddExistingItem(_itm)
	
	if (item) then
		local sec = item:section()
		_itm.item_id = item:id()
		
		local inv_grid_width = system_ini():r_float(sec,"inv_grid_width")
		local inv_grid_height = system_ini():r_float(sec,"inv_grid_height")
		local inv_grid_x = system_ini():r_float(sec,"inv_grid_x")
		local inv_grid_y = system_ini():r_float(sec,"inv_grid_y")

		_itm.x1 = inv_grid_x*50
		_itm.y1 = inv_grid_y*50

		_itm.width = inv_grid_width*50
		_itm.height = inv_grid_height*50

		_itm.x2 = _itm.x1 + _itm.width
		_itm.y2 = _itm.y1 + _itm.height
	end
end

function ui_cooking:list_meat_list_item_clicked()
	if self.list_meat:GetSize()==0 then return end

	local item = self.list_meat:GetSelectedItem()
	if not (item) then
		self.picture:SetTextureRect(Frect():set(0,0,0,0))
		return
	end

	local se_item = item.item_id and alife():object(item.item_id)
	if (se_item == nil or not db.actor:object(se_item:section_name())) then
		self.list_meat:RemoveItem(item)
		return
	end

	local w,h = item.width,item.height
	w,h = item.width/1.5,item.height/1.2
	self.picture:InitTexture("ui\\ui_icon_equipment")
	self.picture:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture:SetWndSize(vector2():set(w,h))

	if not (self.picture.x) then
		local pos = self.picture:GetWndPos()
		self.picture.x = pos.x
		self.picture.y = pos.y
	end

	self.picture:SetWndPos(vector2():set(self.picture.x-w/2, self.picture.y-h/2))

	if (self.section~="cooking") then
		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		self:FillPartsList()
	else
		self.list_fuel:RemoveAll()
	end
end

function ui_cooking:list_fuel_list_item_clicked()
	if self.list_fuel:GetSize()==0 then return end

	local item = self.list_fuel:GetSelectedItem()
	if not (item) then
		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		return
	end

	local se_item = item.item_id and alife():object(item.item_id)
	if (se_item == nil or not db.actor:object(se_item:section_name())) then
		self.list_fuel:RemoveItem(item)
		return
	end
	
	local sec = se_item:section_name()

	local w,h = item.width,item.height
	w,h = item.width/1.5,item.height/1.2
	self.picture_parts:InitTexture("ui\\ui_icon_equipment")
	self.picture_parts:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture_parts:SetWndSize(vector2():set(w,h))

	if not (self.picture_parts.x) then
		local pos = self.picture_parts:GetWndPos()
		self.picture_parts.x = pos.x
		self.picture_parts.y = pos.y
	end

	self.picture_parts:SetWndPos(vector2():set(self.picture_parts.x-w/2, self.picture_parts.y-h/2))
	
end

function ui_cooking:btn_cook_button_clicked()
	if (self.list_meat) then
		index = self.list_meat:GetSelectedIndex()
		if (index ~= -1) then
			item = self.list_meat:GetItemByIndex(index)
			local se_obj = item and item.item_id and alife():object(item.item_id)
			local obj = item and item.item_id and level.object_by_id(item.item_id)
			if (obj) then
				local cook
				if (self.section ~="cooking") then
					if (self.list_fuel) then
						index = self.list_fuel:GetSelectedIndex()
						if (index ~= -1) then
							item2 = self.list_fuel:GetItemByIndex(index)
							local se_obj2 = item2 and item2.item_id and alife():object(item2.item_id)
							local obj2 = item2 and item2.item_id and level.object_by_id(item2.item_id)
							if (obj2) then
								cook = true
								RemoveFuel(se_obj2)
							end
						end
					end
				else
					cook = true
				end
				if cook then
					self:cooking(se_obj)
					self:Hide()
				end
			else
				return
			end
		end
	end
end

function ui_cooking:btn_remove_button_clicked()
	local se_obj = alife():object(self.object:id())
	alife():release(se_obj, true)

	if (self.section == "wood_stove") or (self.section == "fieldcooker") then
		alife():create(self.section,db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
	end
	
	self:HideDialog()
end

function ui_cooking:btn_quit_button_clicked()
	if (self.section =="cooking") then
		alife():create(self.section,db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
	end
	self:Hide()
end

function ui_cooking:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (keyboard_action == ui_events.WINDOW_KEY_PRESSED) then
		if (dik == DIK_keys.DIK_ESCAPE) then
			self:btn_quit_button_clicked()
		end
	end
	return true
end

function ui_cooking:Hide()
	self:HideDialog()
end

function RemoveFuel(s_fuel)
-- kerosene x5
	if s_fuel:section_name() =="kerosene_5" then
		alife():create("kerosene_4", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="kerosene_4" then
		alife():create("kerosene_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="kerosene_3" then
		alife():create("kerosene_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="kerosene_2" then
		alife():create("kerosene", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- charcoal x3
	if s_fuel:section_name() =="charcoal_3" then
		alife():create("charcoal_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="charcoal_2" then
		alife():create("charcoal", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- jerrycan fuel x8
	if s_fuel:section_name() =="explo_jerrycan_fuel_8" then
		alife():create("explo_jerrycan_fuel_7", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_jerrycan_fuel_7" then
		alife():create("explo_jerrycan_fuel_6", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_jerrycan_fuel_6" then
		alife():create("explo_jerrycan_fuel_5", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_jerrycan_fuel_5" then
		alife():create("explo_jerrycan_fuel_4", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_jerrycan_fuel_4" then
		alife():create("explo_jerrycan_fuel_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_jerrycan_fuel_3" then
		alife():create("explo_jerrycan_fuel_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_jerrycan_fuel_2" then
		alife():create("explo_jerrycan_fuel", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_jerrycan_fuel" then
		alife():create("explo_jerrycan_fuel_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
-- balon gas fuel x8
	if s_fuel:section_name() =="explo_balon_gas_8" then
		alife():create("explo_balon_gas_7", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_balon_gas_7" then
		alife():create("explo_balon_gas_6", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_balon_gas_6" then
		alife():create("explo_balon_gas_5", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_balon_gas_5" then
		alife():create("explo_balon_gas_4", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_balon_gas_4" then
		alife():create("explo_balon_gas_3", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_balon_gas_3" then
		alife():create("explo_balon_gas_2", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_balon_gas_2" then
		alife():create("explo_balon_gas", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	if s_fuel:section_name() =="explo_balon_gas" then
		alife():create("explo_balon_gas_0", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	
	alife():release(s_fuel, true)
end

function ui_cooking:cooking(s_meat)
	if s_meat:section_name() =="mutant_part_tushkano_meat" then
		alife():create("meat_tushkano", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	elseif s_meat:section_name() =="mutant_part_dog_meat" then
		alife():create("meat_dog", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	elseif s_meat:section_name() =="mutant_part_snork_hand" then
		alife():create("meat_snork", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	elseif s_meat:section_name() =="mutant_part_psevdodog_meat" then
		alife():create("meat_pseudodog", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	elseif s_meat:section_name() =="mutant_part_flesh_meat" then
		alife():create("meat_flesh", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	elseif s_meat:section_name() =="mutant_part_boar_chop" then
		alife():create("meat_boar", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	elseif s_meat:section_name() =="mutant_part_krovosos_meat" then
		alife():create("meat_bloodsucker", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	elseif s_meat:section_name() =="mutant_part_chimera_meat" then
		alife():create("meat_chimera", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	end
	
	--[[if (self.section=="cooking") then
		local ckit = alife():object(self.object:id())
		alife():release(ckit, true)
	end]]--
	alife():release(s_meat, true)
	local anim = "a_"..self.section
    actor_effects.use_item(anim)
end
