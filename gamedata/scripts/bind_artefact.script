--'******************************************************
--'*  Биндер объекта артефакт .
--'******************************************************

function bind(obj)
	obj:bind_object(artefact_binder(obj))
end

class "artefact_binder" (object_binder)
function artefact_binder:__init(obj) super(obj)
	db.storage[self.object:id()] = { }
	self.last_mayatnik_changes_time = nil
end
function artefact_binder:net_spawn(server_object)
	if not object_binder.net_spawn(self, server_object) then
		return false
	end
	db.add_obj(self.object)
	local artefact = self.object:get_artefact()
	local id = self.object:id()
	if bind_anomaly_zone.artefact_ways_by_id[id] ~= nil then
		local anomal_zone = bind_anomaly_zone.parent_zones_by_artefact_id[id]
		local force_xz	= anomal_zone.applying_force_xz
		local force_y	= anomal_zone.applying_force_y
		artefact:FollowByPath(bind_anomaly_zone.artefact_ways_by_id[id],bind_anomaly_zone.artefact_points_by_id[id],vector():set(force_xz,force_y,force_xz))
	end

	self.first_call = true
	self.news = true

	return true
end
function artefact_binder:update(delta)
	object_binder.update(self, delta)
	
    if self.first_call == true then
	
		SendScriptCallback("artefact_on_first_update",self.object)
		
		local ini = self.object:spawn_ini()
		if not (ini and ini:section_exist("fixed_bone")) then
			self.first_call = false
			return
		end
		local bone_name = r_string_ex(ini,"fixed_bone", "name")

		local ph_shell = self.object:get_physics_shell()
		if not ph_shell then
			return
		end
		
		local ph_element = ph_shell:get_element_by_bone_name(bone_name)

		if ph_element:is_fixed() then
		else
			ph_element:fix()
		end
		
		self.first_call = false
    end
	
	SendScriptCallback("artefact_on_update",self.object,delta)
	
	-- Проверяем, что артефакт - маятник, и делаем действия с таймером.
	if (r_bool_ex(system_ini(),self.object:section(),"mayatnik_changes")) then
		if self.last_mayatnik_changes_time == nil then
			self.last_mayatnik_changes_time = game.get_game_time()
		end
		local timeout = (math.random(120,360) * 60)
		if (game.get_game_time():diffSec(self.last_mayatnik_changes_time) > timeout) then
			self.last_mayatnik_changes_time = game.get_game_time()
			change_mayatnik_character(self.object)
		end
	end
	
end

function artefact_binder:net_destroy(server_object)
	db.del_obj(self.object)
	object_binder.net_destroy(self)
end

-- Save
function artefact_binder:save(stpk)
	set_save_marker(stpk, "save", false, "artefact_binder")
	object_binder.save(self, stpk)
	
	if self.last_mayatnik_changes_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		utils.w_CTime(packet, self.last_mayatnik_changes_time)
	end
	
	set_save_marker(stpk, "save", true, "artefact_binder")
end

-- Load
function artefact_binder:load(stpk)
	set_save_marker(stpk, "load", false, "artefact_binder")
	object_binder.load(self, stpk)
	
	local mayatnik_changes_time = reader:r_bool()
	if mayatnik_changes_time == true then
		self.last_mayatnik_changes_time = utils.r_CTime(reader)
	end
	
	set_save_marker(stpk, "load", true, "artefact_binder")
end

function change_mayatnik_character(art)

	if not (art) then return end
	
	-- Меняем знак у всех возможных для маятников характеристик.
	art:set_artefact_radiation_restore_speed(-art:get_artefact_radiation_restore_speed())
	art:set_artefact_power_restore_speed(-art:get_artefact_power_restore_speed())
	art:set_artefact_bleeding_restore_speed(-art:get_artefact_bleeding_restore_speed())
	art:set_artefact_wound_immunity(-art:get_artefact_wound_immunity())
	art:set_artefact_radiation_immunity(-art:get_artefact_radiation_immunity())
	art:set_artefact_telepatic_immunity(-art:get_artefact_telepatic_immunity())
	
end