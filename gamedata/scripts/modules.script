-- Типы схем:
stype_stalker		= 0
stype_mobile		= 1
stype_item			= 2
stype_heli			= 3
stype_restrictor	= 4
stype_trader		= 5

----------------------------------------------------------------------
-- Загрузка схем:
----------------------------------------------------------------------
----------------------------------------------------------------------
-- Загрузка модулей сталкеров:
----------------------------------------------------------------------
load_scheme("xr_danger",						"danger",			stype_stalker)
load_scheme("xr_gather_items",					"gather_items",		stype_stalker)
load_scheme("xr_abuse",							"abuse",			stype_stalker)
load_scheme("xr_walker",						"walker",			stype_stalker)
load_scheme("xr_remark",						"remark",			stype_stalker)
load_scheme("xr_cover",							"cover",			stype_stalker)
load_scheme("xr_sleeper",						"sleeper",			stype_stalker)
load_scheme("xr_kamp",							"kamp",				stype_stalker)
load_scheme("xr_camper",						"camper",			stype_stalker)
load_scheme("xr_meet",							"meet",				stype_stalker)
load_scheme("xr_help_wounded",					"help_wounded",		stype_stalker)
load_scheme("xr_corpse_detection",				"corpse_detection",	stype_stalker)
load_scheme("xr_combat",						"combat",			stype_stalker)
load_scheme("xr_death",							"death",			stype_stalker)
load_scheme("xr_hit",							"hit",				stype_stalker)
load_scheme("xr_wounded",						"wounded",			stype_stalker)
load_scheme("xr_meet",							"actor_dialogs",	stype_stalker)
load_scheme("xr_combat_ignore",					"combat_ignore",	stype_stalker)
load_scheme("xr_combat_zombied",				"combat_zombied",	stype_stalker)
load_scheme("xr_patrol",						"patrol",			stype_stalker)
load_scheme("xr_smartcover",					"smartcover",		stype_stalker)
load_scheme("xr_companion",						"companion",		stype_stalker)
load_scheme("xr_animpoint",						"animpoint",		stype_stalker)
load_scheme("xr_reach_task",					"reach_task",		stype_stalker)
load_scheme("axr_turn_on_campfire",				"turn_on_campfire",	stype_stalker)

----------------------------------------------------------------------
-- Загрузка модулей Торговца
----------------------------------------------------------------------
load_scheme("mob_trader",   "mob_trader",   stype_trader)
load_scheme("mob_trade",    "mob_trade",    stype_trader)

----------------------------------------------------------------------
-- Загрузка модулей монстров:
----------------------------------------------------------------------
load_scheme("mob_remark",						"mob_remark",		stype_mobile)
load_scheme("mob_walker",						"mob_walker",		stype_mobile)
load_scheme("mob_combat",						"mob_combat",		stype_mobile)
load_scheme("mob_death",						"mob_death",		stype_mobile)
load_scheme("mob_jump",							"mob_jump",			stype_mobile)
load_scheme("mob_home",							"mob_home",			stype_mobile)
----------------------------------------------------------------------
-- Загрузка модулей физических объектов:
----------------------------------------------------------------------
load_scheme("ph_door",							"ph_door",			stype_item)
load_scheme("ph_idle",							"ph_idle",			stype_item)
load_scheme("ph_hit",							"ph_hit",			stype_item)
load_scheme("ph_on_hit",						"ph_on_hit",		stype_item)
load_scheme("ph_button",						"ph_button",		stype_item)
load_scheme("ph_code",							"ph_code",			stype_item)
load_scheme("ph_death",							"ph_on_death",		stype_item)
load_scheme("ph_minigun",						"ph_minigun",		stype_item)
--load_scheme("ph_target",						"ph_target",		stype_item)
load_scheme("ph_oscillate",						"ph_oscillate",		stype_item)
----------------------------------------------------------------------
-- Загрузка модулей вертолёта:
----------------------------------------------------------------------
load_scheme("heli_move",      					"heli_move",		stype_heli)
----------------------------------------------------------------------
-- Загрузка модулей рестрикторов:
----------------------------------------------------------------------
load_scheme("sr_no_weapon",						"sr_no_weapon",		stype_restrictor)
load_scheme("sr_teleport",						"sr_teleport",		stype_restrictor)
load_scheme("sr_idle",							"sr_idle",			stype_restrictor)
load_scheme("sr_light",							"sr_light",			stype_restrictor)
load_scheme("sr_timer",							"sr_timer",			stype_restrictor)
load_scheme("sr_psy_antenna",					"sr_psy_antenna",	stype_restrictor)
load_scheme("sr_postprocess",					"sr_postprocess",	stype_restrictor)
load_scheme("sr_particle",						"sr_particle",		stype_restrictor)
load_scheme("sr_cutscene",						"sr_cutscene",		stype_restrictor)
--load_scheme("sr_bloodsucker",					"sr_bloodsucker",	stype_restrictor)
load_scheme("sr_monster",						"sr_monster",		stype_restrictor)
--load_scheme("sr_robbery",						"sr_robbery",		stype_restrictor)
--load_scheme("sr_survival",						"sr_survival",		stype_restrictor)
load_scheme("sr_crow_spawner",					"sr_crow_spawner",	stype_restrictor)
--load_scheme("sr_shooting",						"sr_shooting",		stype_restrictor)
--load_scheme("sr_recoveritem",					"sr_recoveritem",	stype_restrictor)
load_scheme("sr_silence",						"sr_silence",		stype_restrictor)
load_scheme("sr_deimos",						"sr_deimos",		stype_restrictor)

function on_game_start()
	for scheme,filename in pairs(_G.schemes) do 
		if (_G[filename] and _G[filename].on_game_start) then 
			_G[filename].on_game_start()
		end			
	end
end
local new_schemes = {
	axr_turn_on_campfire = true,
}
local temp = {}
function enable_generic_schemes(npc,ini,section,stype)
	if not (npc) then 
		abort("CRITICAL ERROR: enable_generic_schemes NPC IS NIL!")
		return
	end 
	
	local filename
	for scheme,v in pairs(_G.schemes_by_stype[stype]) do
		filename = _G.schemes[scheme]
		if (new_schemes[filename] and _G[filename] and _G[filename].setup_generic_scheme) then
			temp[scheme] = empty_table(temp[scheme])
			_G[filename].setup_generic_scheme(npc,ini,scheme,section,stype,temp[scheme])
		end
	end
	
	local id = npc:id()
	for scheme,v in pairs(_G.schemes_by_stype[stype]) do
		if (temp[scheme] and temp[scheme].needs_configured) then
			filename = _G.schemes[scheme]
			if (new_schemes[filename] and _G[filename] and _G[filename].configure_actions) then
				
				if not (db.storage[id][scheme]) then 
					printf("ERROR: storage for db.storage[%s][%s] not setup!",id,scheme)
				end
				
				_G[filename].configure_actions(npc,ini,scheme,section,stype,temp[scheme])
			end
		end
	end
end

function reset_generic_schemes(npc,scheme,section)
	if not (npc) then 
		abort("CRITICAL ERROR: reset_generic_schemes NPC IS NIL!")
		return
	end 
	local st = db.storage[npc:id()]
	if not (st) then 
		printf("ERROR: reset_generic_schemes: storage is nil! npc=%s scheme=%s section=%s",npc and npc:name(),scheme,section)
		return
	end 
	
	st.exit_from_smartcover_initialized = nil

	if not st.stype then
		return
	end
	
	local filename
	for scheme,v in pairs(_G.schemes_by_stype[st.stype]) do
		filename = _G.schemes[scheme]
		if (new_schemes[filename] and _G[filename] and st[scheme] and _G[filename].reset_generic_scheme) then
			--printf("DEBUG: reset_generic_schemes npc=%s scheme=%s  storage_exists=%s",npc and npc:name(),scheme,st[scheme])
			_G[filename].reset_generic_scheme(npc,scheme,section,st.stype,st)
		end
	end

	if (st.stype == stype_stalker) then
		restrictor_manager.get_restrictor_manager(npc):reset_restrictions(st, section)
		xr_hear.reset_hear_callback(st, section)
		stalker_generic.reset_threshold(npc, scheme, st, section)
		stalker_generic.reset_show_spot(npc, scheme, st, section)
		stalker_generic.reset_invulnerability(npc, st.ini, section)
		stalker_generic.reset_group(npc, st.ini, section)
		stalker_generic.take_items_enabled(npc, scheme, st, section)
		stalker_generic.can_select_weapon(npc, scheme, st, section)
	elseif st.stype == modules.stype_mobile then
		xr_logic.mob_release(npc)
		if get_clsid(npc) == clsid.bloodsucker_s then
			if scheme == "nil" then
				npc:set_manual_invisibility(false)
			else
				npc:set_manual_invisibility(true)
			end
		end
		stalker_generic.reset_invulnerability(npc, st.ini, section)
		restrictor_manager.get_restrictor_manager(npc):reset_restrictions(st, section)
		xr_hear.reset_hear_callback(st,section)
    elseif st.stype == modules.stype_trader then
		stalker_generic.reset_show_spot(npc, scheme, st, section)
	elseif st.stype == modules.stype_item then
		npc:set_callback(callback.use_object, nil)
		npc:set_nonscript_usable(true)
	end
end 

function disable_generic_schemes(npc, stype)
	if not (npc) then 
		abort("CRITICAL ERROR: disable_generic_schemes NPC IS NIL!")
		return
	end 
	local st = db.storage[npc:id()]
	if not (st) then 
		printf("ERROR: disable_generic_schemes : storage is nil! npc=%s scheme=%s section=%s",npc and npc:name(),scheme,section)
		return
	end 
	
	local filename
	for scheme,v in pairs(_G.schemes_by_stype[stype]) do
		filename = _G.schemes[scheme]
		if (new_schemes[filename] and _G[filename] and st[scheme] and _G[filename].disable_generic_scheme) then
			_G[filename].disable_generic_scheme(npc,scheme,stype)
		end
	end
end